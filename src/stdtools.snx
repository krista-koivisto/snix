float SamplePositionOffset(float2 offset, float2 pos)
{
    // Get the pixel size by divding 1 by the size of the input image
    // and then multiply that by the offset passed.
    float posX = pos[0] + ((1.0f / $size[0]) * offset[0]);
    float posY = pos[1] + ((1.0f / $size[1]) * offset[1]);
    
    return sample((float2){posX, posY});
}

float SampleOffset(float2 offset)
{
    // Get the pixel size by divding 1 by the size of the input image
    // and then multiply that by the offset passed.
    float posX = $pos[0] + ((1.0f / $size[0]) * offset[0]);
    float posY = $pos[1] + ((1.0f / $size[1]) * offset[1]);
    
    return sample((float2){posX, posY});
}


float SampleGrid(float current, float size) // Current = 5.0f, size = 9.0f
{
    float dimension = sqrt(size);
    float center = floor(dimension / 2.0f);
    
    float row = floor(current / dimension);
    float column = current - (row * dimension);
    
    return SampleOffset((float2){row - center, column - center});
}

float4 SamplePositionOffsetColor(float2 offset, float2 pos)
{
    // Get the pixel size by divding 1 by the size of the input image
    // and then multiply that by the offset passed.
    float posX = pos[0] + ((1.0f / $size[0]) * offset[0]);
    float posY = pos[1] + ((1.0f / $size[1]) * offset[1]);
    
    return sampleColor((float2){posX, posY});
}

float4 SampleOffsetColor(float2 offset)
{
    // Get the pixel size by divding 1 by the size of the input image
    // and then multiply that by the offset passed.
    float posX = $pos[0] + ((1.0f / $size[0]) * offset[0]);
    float posY = $pos[1] + ((1.0f / $size[1]) * offset[1]);
    
    return sampleColor((float2){posX, posY});
}

float4 SampleGridColor(float current, float size) // Current = 5.0f, size = 9.0f
{
    float dimension = sqrt(size);
    float center = floor(dimension / 2.0f);
    
    float row = floor(current / dimension);
    float column = current - (row * dimension);
    
    return SampleOffsetColor((float2){row - center, column - center});
}

float DegToRad(float angle)
{
    float pi = 3.14159f;
    return (angle * pi / 180.0f);
}

float RadToDeg(float rad)
{
    float pi = 3.14159f;
    return rad * 180.0f / pi;
}

float4 TransformOffset(float2 offset)
{
    return sampleColor($pos + offset);
}

float3 ImageToNormal(float4 normal)
{
    float nx = (2.0f * normal[0]) - 1.0f;
    float ny = (2.0f * normal[1]) - 1.0f;
    float nz = (2.0f * normal[2]) - 1.0f;
    
    return (float3){nx, ny, nz};
}

float4 NormalToImage(float3 normal, float intensity)
{
    float x = (normal[0] * intensity) / 2.0f + 0.5f;
    float y = (normal[1] * intensity) / 2.0f + 0.5f;
    float z = 1.0f;
    float w = 1.0f;
    return (float4){x, y, z, w};
}

float NormalToAngle(float3 normal)
{
    float x = normal[0];
    float y = normal[1];
    
    return RadToDeg(atan2((float2){x, y}));
}

float3 AngleToNormal(float rotation)
{
    float theta = DegToRad((sample($pos) + rotation) * 180.0f);
    float c = cos(theta);
    float s = sin(theta);
    float x = (c - s);
    float y = (c + s);
    float z = 0.0f;
    
    return (float3){x, y, z};
}

float SimpleEdgeDetect(float bias)
{
    float value = sample($pos);
    
    // Sample pixels in a + formation and check against the bias
    if (!(SampleOffset((float2){-1.0f,  0.0f}) >= bias  &&
          SampleOffset((float2){ 1.0f,  0.0f}) >= bias  &&
          SampleOffset((float2){ 0.0f, -1.0f}) >= bias  &&
          SampleOffset((float2){ 0.0f,  1.0f}) >= bias) &&
          value >= bias) // Compare the current pixel value as well
    {
        
        float ret = 1.0f;
    }
    else
    {
        float ret = 0.0f;
    }
    
    return __if__;
}

float4 SobelEdgeDetect(float strength)
{
	float w = 1.0f / $size[0];
	float h = 1.0f / $size[1];

    // Sample all surrounding pixels including the current one
	float4 n0 = sampleColor($pos + (float2){  -w,  -h});
	float4 n1 = sampleColor($pos + (float2){0.0f,  -h});
	float4 n2 = sampleColor($pos + (float2){   w,  -h});
	float4 n3 = sampleColor($pos + (float2){  -w, 0.0f});
	float4 n4 = sampleColor($pos);
	float4 n5 = sampleColor($pos + (float2){   w, 0.0f});
	float4 n6 = sampleColor($pos + (float2){  -w,    h});
	float4 n7 = sampleColor($pos + (float2){0.0f,    h});
	float4 n8 = sampleColor($pos + (float2){   w,    h});
	
	float4 sobel_edge_h = n2 + (strength * n5) + n8 - (n0 + (strength * n3) + n6);
  	float4 sobel_edge_v = n0 + (strength * n1) + n2 - (n6 + (strength * n7) + n8);
	float4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));
	
	return (float4){1.0f - sobel[0], 1.0f - sobel[1], 1.0f - sobel[2], 1.0f};
}
